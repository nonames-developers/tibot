<launch>

  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  
  <!-- TURTLEBOT 3 -->
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="$(arg model)"/>
  </include>

  <!-- GAZEBO MAP -->
  <include file="$(find tibot_navigation_system)/launch/tibot_gazebo_map.launch">
    <arg name="model" value="$(arg model)"/>
  </include>

  <!-- MAPPING -->
  <arg name="map_file" default="$(find tibot_navigation_system)/maps/my_map.yaml"/>

  <!-- MAP SERVER -->
  <node pkg="map_server" type="map_server" name="map_server" args="$(arg map_file)"/>

  <!-- GET MAP DATA -->
  <node pkg="tibot_navigation_system" type="call_map_service.py" name="call_map_service_node" output="screen"/>

  <!-- MOVE_BASE -->
  <arg name="cmd_vel_topic" default="/cmd_vel"/>
  <arg name="odom_topic" default="odom"/>
  <node pkg="move_base" type="move_base" name="move_base" respawn="false" output="screen">
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <rosparam file="$(find tibot_navigation_system)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find tibot_navigation_system)/param/local_costmap_params.yaml" command="load"/>
    <rosparam file="$(find tibot_navigation_system)/param/global_costmap_params.yaml" command="load"/>
    <rosparam file="$(find tibot_navigation_system)/param/move_base_params.yaml" command="load"/>
    <rosparam file="$(find tibot_navigation_system)/param/dwa_local_planner_params_$(arg model).yaml" command="load"/>
    <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
    <remap from="odom" to="$(arg odom_topic)"/>
  </node>

  <!-- STATE MACHINE -->
  <node pkg="tibot_navigation_system" type="fsm.py" name="move_base_action_client" output="screen"/>

  <!-- MOVE FIXED POSITION -->
  <node pkg="tibot_navigation_system" type="move_fixed_pos_service.py" name="move_fixed_pos_service_node" output="screen"/>
  
  <!-- AUTOMATIC MAPPING -->
  <node pkg="tibot_navigation_system" type="explore" name="automatic_mapping_service_node" output="screen">
    <param name="robot_base_frame" value="base_link"/>
    <param name="costmap_topic" value="map"/>
    <param name="costmap_updates_topic" value="map_updates"/>
    <param name="visualize" value="true"/>
    <param name="planner_frequency" value="0.33"/>
    <param name="progress_timeout" value="30.0"/>
    <param name="potential_scale" value="3.0"/>
    <param name="orientation_scale" value="0.0"/>
    <param name="gain_scale" value="1.0"/>
    <param name="transform_tolerance" value="0.3"/>
    <param name="min_frontier_size" value="0.75"/>
  </node>

  <!-- SLAM: Gmapping, Cartographer, Hector, Karto, Frontier_exploration, RTAB-Map -->
  <arg name="slam_methods" default="hector" doc="slam type [gmapping, hector, frontier_exploration]"/>
  <arg name="configuration_basename" default="turtlebot3_lds_2d.lua"/>
  <include file="$(find turtlebot3_slam)/launch/turtlebot3_$(arg slam_methods).launch">
    <arg name="model" value="$(arg model)"/>
    <arg name="configuration_basename" value="$(arg configuration_basename)"/>
  </include>

  <!-- AMCL -->
  <include file="$(find tibot_navigation_system)/launch/tibot_amcl.launch"/>
  
  <!-- RVIZ -->
  <arg name="open_rviz" default="true"/>
  <arg name="rviz_config" default="$(find tibot_navigation_system)/rviz/tibot_navigation_system_config.rviz"/>
  <group if="$(arg open_rviz)">
    <node pkg="rviz" type="rviz" name="rviz" required="true" args="-d $(arg rviz_config)"/>
  </group>


</launch>
